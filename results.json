{
    "tests": [
        {
            "score": 0,
            "max_score": 8,
            "name": "test_alignment.py::test_small_dna_alignment_not_banded",
            "output": "\nalign = <function align at 0x786ebc486f20>\n\n    @max_score(8)\n    @with_import('alignment')\n    def test_small_dna_alignment_not_banded(align):\n>       score, aseq1, aseq2 = align('GGGGTTTTAAAACCCCTTTT', 'TTTTAAAACCCCTTTTGGGG')\n\ntest_alignment.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nalignment.py:45: in align\n    path_tuple = find_path(penalties, gap, matrix, seq1, seq2)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npenalties = {'indel': 5, 'match': -3, 'sub': 1}, gap = '-'\nmatrix = {(0, 0): 0, (0, 1): 5, (0, 2): 10, (0, 3): 15, ...}\nx = 'GGGGTTTTAAAACCCCTTTT', y = 'TTTTAAAACCCCTTTTGGGG'\n\n    def find_path(penalties: dict, gap: str, matrix: dict, x: str, y: str) -> tuple[int, str, str]:\n    \n        outstr1 = \"\"\n        outstr2 = \"\"\n    \n        i = len(x)\n        j = len(y)\n    \n        while i > 0 and j > 0:\n    \n            # print(\"-------------------------------------------------\")\n    \n            diag = calc_diag(penalties, matrix, x, y, i, j)\n            up = calc_up(penalties, matrix, i, j)\n            left = calc_left(penalties, matrix, i, j)\n    \n            lowest_cost = diag\n            lowest_direction = \"diag\"\n            path_to_next_x = -1\n            path_to_next_y = -1\n    \n            if up < lowest_cost:\n                lowest_cost = up\n                lowest_direction = \"up\"\n                path_to_next_x = 0\n                path_to_next_y = -1\n    \n            if left < lowest_cost:\n                lowest_cost = left\n                lowest_direction = \"left\"\n                path_to_next_x = -1\n                path_to_next_y = 0\n    \n            # print(f\"i: {i}, j: {j}, value: {matrix[(i, j)]}, lowest_direction: {lowest_direction}\")\n    \n            i += path_to_next_y\n            j += path_to_next_x\n    \n            # print(lowest_direction)\n    \n    \n            if lowest_direction == \"diag\":\n                outstr1 = x[i] + outstr1\n                outstr2 = y[j] + outstr2\n            elif lowest_direction == \"up\":\n                outstr1 = x[i] + outstr1\n                outstr2 = gap + outstr2\n            elif lowest_direction == \"left\":\n                outstr1 = gap + outstr1\n>               outstr2 = y[i] + outstr2\nE               IndexError: string index out of range\n\nalignment.py:175: IndexError",
            "visibility": "visible"
        }
    ]
}